<template>
 <div class="p-8 space-y-10 max-w-2xl mx-auto">

<!-- Input & Label Section -->
<section class="border rounded-xl p-6 shadow-sm">
  <h2 class="text-lg font-semibold mb-4">‚å®Ô∏è Input & Label</h2>

  <!-- Normal input -->
  <Input placeholder="Normal input" />

  <!-- Reactive Validation Example -->
  <div class="mt-6 space-y-2">
    <Input
      v-model="email"
      placeholder="Email"
      :stage="emailStage"
      :stageMessage="emailMessage"
    />

    <Input
      v-model="password"
      type="password"
      placeholder="Password"
      :stage="passwordStage"
      :stageMessage="passwordMessage"
    />

    <button
      class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
      @click="validateForm"
    >
      Submit
    </button>
  </div>
</section>

</div>

  <div class="p-8 space-y-10 max-w-2xl mx-auto">

   
    <!-- Button Section -->
    <section class="border rounded-xl p-6 shadow-sm">
      <h2 class="text-lg font-semibold mb-4">üîò Buttons</h2>
      <div class="flex flex-wrap gap-4">
        <Button>Default</Button>
        <Button variant="outline">Outline</Button>
        <Button variant="secondary">Secondary</Button>
        <Button variant="destructive">Destructive</Button>
        <Button variant="ghost">Ghost</Button>
        <Button variant="link">Link</Button>
        <Button size="sm">Small</Button>
        <Button size="md">Medium</Button>
        <Button size="lg">Large</Button>
        <Button size="icon">Icon</Button>
      </div>
    </section>

    <!-- Avatar Section -->
    <section class="border rounded-xl p-6 shadow-sm">
      <h2 class="text-lg font-semibold mb-4">üßç Avatar</h2>
      <div class="flex items-center space-x-4">
        <Avatar src="" fallbackText="Rushabh jain" size="md" ring />
        <Avatar src="" fallbackText="RJ" size="sm" />
        <Avatar src="" fallbackText="A" size="lg" />
      </div>
    </section>

    <!-- Input & Label Section -->
    <section class="border rounded-xl p-6 shadow-sm">
      <h2 class="text-lg font-semibold mb-4">‚å®Ô∏è Input & Label</h2>

      <Input placeholder="Normal input" />

      <div class="grid w-full items-center gap-1 mt-4">
        <Label for="picture">Picture</Label>
        <Input id="picture" type="file" />
      </div>

      <div class="grid w-full items-center gap-1 mt-4">
        <Label for="disabledFile">Disabled File</Label>
        <Input id="disabledFile" type="file" disabled />


      

      </div>

      <div class="mt-4 space-y-2">
        <!-- Custom messages -->
        <Input stage="error" placeholder="Error input" stageMessage="Invalid data" />
        <Input stage="success" placeholder="Success input" stageMessage="All good!" />
        <Input stage="warning" placeholder="Warning input" stageMessage="Check carefully" />
      </div>




    </section>

    <!-- Accordion Section -->
    <section class="border rounded-xl p-6 shadow-sm">
      <h2 class="text-lg font-semibold mb-4">üìÇ Accordion</h2>

      <Accordion type="single" collapsible>
        <AccordionItem value="item-1">
          <AccordionTrigger>Is it accessible?</AccordionTrigger>
          <AccordionContent>
            Yes. It adheres to the WAI-ARIA design pattern.
          </AccordionContent>
        </AccordionItem>

        <AccordionItem value="item-2">
          <AccordionTrigger>Can I style it?</AccordionTrigger>
          <AccordionContent>
            Absolutely. You can customize it however you want.
          </AccordionContent>
        </AccordionItem>

        <AccordionItem value="item-3">
          <AccordionTrigger>Can it be animated?</AccordionTrigger>
          <AccordionContent>
            Yes! You can add smooth slide animations with Tailwind or Vue transitions.
          </AccordionContent>
        </AccordionItem>
      </Accordion>
    </section>

    <!-- Switch Section -->
    <section class="border rounded-xl p-6 shadow-sm">
      <h2 class="text-lg font-semibold mb-4">üéöÔ∏è Switch</h2>

      <!-- Simple Switch -->
      <div class="flex items-center space-x-3 mb-4">
        <Switch id="notifications" />
        <Label for="notifications">Enable Notifications</Label>
      </div>

      <!-- Switch with Label + Description -->
      <div class="flex items-center justify-between border p-4 rounded-md">
        <div>
          <Label for="airplaneMode" class="text-sm font-medium text-gray-900">
            Airplane Mode
          </Label>
          <p class="text-sm text-gray-500">Disables Wi-Fi and cellular connection</p>
        </div>
        <Switch id="airplaneMode" />
      </div>
    </section>
  </div>
</template>

<script setup lang="ts">
import { ref, watch } from "vue";
import Button from "./components/Button/Button.vue";
import Avatar from "./components/Avatar/Avatar.vue";
import Input from "./components/Input/Input.vue";
import Label from "./components/Label/Label.vue";
import Switch from "./components/Switch/Switch.vue";

import {
  Accordion,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
} from "./components/Accordion";





const email = ref("");
const password = ref("");

const emailStage = ref<"error" | "success" | undefined>();
const emailMessage = ref("");

const passwordStage = ref<"error" | "success" | undefined>();
const passwordMessage = ref("");

// Live validation using watch
watch(email, (val) => {
  if (!val) {
    emailStage.value = undefined;
    emailMessage.value = "";
  } else if (!val.includes("@")) {
    emailStage.value = "error";
    emailMessage.value = "Invalid email address";
  } else {
    emailStage.value = "success";
    emailMessage.value = "Looks good!";
  }
});

watch(password, (val) => {
  if (!val) {
    passwordStage.value = undefined;
    passwordMessage.value = "";
  } else if (val.length < 6) {
    passwordStage.value = "error";
    passwordMessage.value = "Password too short";
  } else {
    passwordStage.value = "success";
    passwordMessage.value = "Strong password!";
  }
});
</script>




// // scripts/configured.js
// import fs from "fs";
// import path from "path";
// import { execSync } from "child_process";
// import { writeThemeCSS, detectCSSFile } from "./theme-setup.js";

// export async function configureProject(answers, success) {
//   const green = "\x1b[32m";
//   const yellow = "\x1b[33m";
//   const reset = "\x1b[0m";

//   const {
//     theme,
//     jsConfigSetup,
//     jsConfigAppSetup, // ‚úÖ new prompt value
//     viteConfigSetup,
//   } = answers;

//   console.log(`‚¨¢ Installing dependencies...`);
//   execSync(
//     "npm install -D tailwindcss @tailwindcss/vite autoprefixer reka-ui class-variance-authority typescript lucide-vue-next  --no-audit --no-fund",
//     { stdio: "inherit" }
//   );

//   // ---------------- components.json ----------------
//   const componentsConfig = {
//     $schema: "https://ui.vueon.com/schema.json",
//     style: "default",
//     rsc: false,
//     tsx: false,
//     tailwind: {
//       config: "tailwind.config.js",
//       css: detectCSSFile(),
//       baseColor: theme,
//       cssVariables: true,
//       prefix: "",
//     },
//     aliases: {
//       components: "@/components",
//       ui: "@/ui",
//       utils: "@/lib/utils",
//       lib: "@/lib",
//     },
//     iconLibrary: "lucide",
//   };
//   fs.writeFileSync("components.json", JSON.stringify(componentsConfig, null, 2));
//   success("Created components.json");

//   // ---------------- style.css ----------------
//   writeThemeCSS(theme, success);

//   // ---------------- vite.config.js ----------------
//   const viteConfigPath = "vite.config.js";
//   if (viteConfigSetup === "auto") {
//     if (!fs.existsSync(viteConfigPath)) {
//       const viteConfigContent = `import { defineConfig } from 'vite'
// import vue from '@vitejs/plugin-vue'
// import tailwindcss from '@tailwindcss/vite'
// import path from 'path'

// export default defineConfig({
//   plugins: [vue(), tailwindcss()],
//   resolve: { alias: { '@': path.resolve(__dirname, './src') } }
// })`;
//       fs.writeFileSync(viteConfigPath, viteConfigContent.trim());
//       success("Created vite.config.js");
//     } else {
//       console.log(`${yellow}‚ö† vite.config.js already exists ‚Äî skipped.${reset}`);
//     }
//   }

//   // ---------------- jsconfig.json + jsconfig.app.json ----------------
//   const jsConfigPath = path.join(process.cwd(), "jsconfig.json");
//   const jsConfigAppPath = path.join(process.cwd(), "jsconfig.app.json");

//   const jsConfigContent = {
//     compilerOptions: {
//       baseUrl: ".",
//       paths: {
//         "@/*": ["src/*"],
//         "@components/*": ["src/components/*"],
//         "@ui/*": ["src/ui/*"],
//         "@lib/*": ["src/lib/*"],
//         "@utils/*": ["src/lib/utils/*"],
//       },
//     },
//     exclude: ["node_modules", "dist"],
//   };

//   // jsconfig.json
//   if (jsConfigSetup === "auto") {
//     if (!fs.existsSync(jsConfigPath)) {
//       fs.writeFileSync(jsConfigPath, JSON.stringify(jsConfigContent, null, 2));
//       success("Created jsconfig.json");
//     } else {
//       console.log(`${yellow}‚ö† jsconfig.json already exists ‚Äî skipped.${reset}`);
//     }
//   }

//   // jsconfig.app.json
//   if (jsConfigAppSetup === "auto") {
//     if (!fs.existsSync(jsConfigAppPath)) {
//       fs.writeFileSync(jsConfigAppPath, JSON.stringify(jsConfigContent, null, 2));
//       success("Created jsconfig.app.json");
//     } else {
//       console.log(`${yellow}‚ö† jsconfig.app.json already exists ‚Äî skipped.${reset}`);
//     }
//   }

//   await import("./variants_CLI.js");

//   console.log(`\n${green}‚ùñ Vueon UI initialized with ${theme} theme! ${reset}\n`);

//   // ---------------- Manual Setup Messages ----------------
//   const manualFiles = [];
//   if (jsConfigSetup === "manual") manualFiles.push("jsconfig.json");
//   if (jsConfigAppSetup === "manual") manualFiles.push("jsconfig.app.json");
//   if (viteConfigSetup === "manual") manualFiles.push("vite.config.js");

//   if (manualFiles.length > 0) {
//     console.log(`\n ${yellow}‚öô  Some files require manual setup:${reset}`);
//     console.log(`   ‚Üí ${manualFiles.join(" and ")}`);
//     console.log("   Follow the guide: https://ui.vueon.com/setup");
//     console.log(
//       `   (Create or update ${manualFiles.join(" and ")} as shown)\n`
//     );
//   }

//   console.log("\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n");
//   console.log("Next steps:");
//   console.log(`  1. Run: npx vueon-ui add Button\n`);
// }